import * as assert from 'assert';
import * as fs from 'fs';
import * as path from 'path';

import { yellow } from '../utilities';
import {
  evolve,
  processFile,
  solverPart1,
  solverPart2
} from './index';


const examplePathname = path.resolve(__dirname, './example.txt');
const exampleFile = fs.readFileSync(examplePathname, 'utf-8');
const example = processFile(exampleFile);

describe('Day 17: Conway Cubes (Part 1)', () => {
  describe(`evolve()`, () => {
    it([
      `should produce the following output after one cycle:`,
      `           z=0`,
      `           .#.`,
      `           ..#`,
      `           ###`
    ].join('\n'), () => {
      const exampleCopy = JSON.parse(JSON.stringify(example));
      const solution = evolve(exampleCopy, 1);
      const expected = {
        "-1": {
          "0": {
            "0": "#",
            "1": ".",
            "2": "."
          },
          "1": {
            "0": ".",
            "1": ".",
            "2": "#"
          },
          "2": {
            "0": ".",
            "1": "#",
            "2": "."
          }
        },
        "0": {
          "0": {
            "0": "#",
            "1": ".",
            "2": "#"
          },
          "1": {
            "0": ".",
            "1": "#",
            "2": "#"
          },
          "2": {
            "0": ".",
            "1": "#",
            "2": "."
          }
        },
        "1": {
          "0": {
            "0": "#",
            "1": ".",
            "2": "."
          },
          "1": {
            "0": ".",
            "1": ".",
            "2": "#"
          },
          "2": {
            "0": ".",
            "1": "#",
            "2": "."
          }
        }
      };

      assert.deepStrictEqual(solution, expected);
    });

    it([
      `should produce the following output after one cycle:`,
      `           z=0`,
      `           .#.`,
      `           ..#`,
      `           ###`
    ].join('\n'), () => {
      const exampleCopy = JSON.parse(JSON.stringify(example));
      const solution = evolve(exampleCopy, 1);
      const expected = {
        "-2": {
          "-2": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "-1": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "0": {
            "-2": ".",
            "-1": ".",
            "0": "#",
            "1": ".",
            "2": "."
          },
          "1": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "2": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          }
        },
        "-1": {
          "-2": {
            "-2": ".",
            "-1": ".",
            "0": "#",
            "1": ".",
            "2": "."
          },
          "-1": {
            "-2": ".",
            "-1": "#",
            "0": ".",
            "1": ".",
            "2": "#"
          },
          "0": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "#"
          },
          "1": {
            "-2": ".",
            "-1": "#",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "2": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          }
        },
        "-2": {
          "-2": {
            "-2": "#",
            "-1": "#",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "-1": {
            "-2": "#",
            "-1": "#",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "0": {
            "-2": "#",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "1": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "#"
          },
          "2": {
            "-2": ".",
            "-1": "#",
            "0": "#",
            "1": "#",
            "2": "."
          }
        },
        "-1": {
          "-2": {
            "-2": ".",
            "-1": ".",
            "0": "#",
            "1": ".",
            "2": "."
          },
          "-1": {
            "-2": ".",
            "-1": "#",
            "0": ".",
            "1": ".",
            "2": "#"
          },
          "0": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "#"
          },
          "1": {
            "-2": ".",
            "-1": "#",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "2": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          }
        },
        "0": {
          "-2": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "-1": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "0": {
            "-2": ".",
            "-1": ".",
            "0": "#",
            "1": ".",
            "2": "."
          },
          "1": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          },
          "2": {
            "-2": ".",
            "-1": ".",
            "0": ".",
            "1": ".",
            "2": "."
          }
        }
      };

      assert.deepStrictEqual(solution, expected);
    });
  });

  it([
    `should produce the following output after one cycle:`,
    `           z=0`,
    `           .#.`,
    `           ..#`,
    `           ###`
  ].join('\n'), () => {
    const exampleCopy = JSON.parse(JSON.stringify(example));
    const solution = evolve(exampleCopy, 1);
    const expected = {
      "0": {
        "0": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "1": {
          "0": ".",
          "1": ".",
          "2": "#",
          "3": "#",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "2": {
          "0": ".",
          "1": "#",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": "#",
          "-1": "#"
        },
        "3": {
          "0": "#",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-3": {
          "0": "#",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-2": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-1": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": "#",
          "-2": ".",
          "-1": "."
        }
      },
      "1": {
        "0": {
          "0": ".",
          "1": ".",
          "2": "#",
          "3": "#",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "1": {
          "0": ".",
          "1": ".",
          "2": "#",
          "3": ".",
          "-3": ".",
          "-2": "#",
          "-1": "."
        },
        "2": {
          "0": ".",
          "1": "#",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "#"
        },
        "3": {
          "0": "#",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-3": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "#"
        },
        "-2": {
          "0": "#",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-1": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": "#",
          "-2": ".",
          "-1": "."
        }
      },
      "2": {
        "0": {
          "0": "#",
          "1": "#",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "#"
        },
        "1": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "2": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "3": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-3": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-2": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-1": {
          "0": "#",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "#"
        }
      },
      "-2": {
        "3": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-3": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-2": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-1": {
          "0": "#",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "#"
        }
        "0": {
          "0": "#",
          "1": "#",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "#"
        },
        "1": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "2": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
      },
      "-1": {
        "0": {
          "0": ".",
          "1": ".",
          "2": "#",
          "3": "#",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "1": {
          "0": ".",
          "1": ".",
          "2": "#",
          "3": ".",
          "-3": ".",
          "-2": "#",
          "-1": "."
        },
        "2": {
          "0": ".",
          "1": "#",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "#"
        },
        "3": {
          "0": "#",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-3": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "#"
        },
        "-2": {
          "0": "#",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": ".",
          "-2": ".",
          "-1": "."
        },
        "-1": {
          "0": ".",
          "1": ".",
          "2": ".",
          "3": ".",
          "-3": "#",
          "-2": ".",
          "-1": "."
        }
      }
    }

    assert.deepStrictEqual(solution, expected);
  });
  
  describe(`sovlerPart1()`, () => {
    it([
      `should do something.`
    ].join(''), () => {
      const solution = solverPart1(example);
    });
  });
});

describe('Day 17: Conway Cubes (Part 2)', () => {
  describe('solverPart2()', () => {
    // Given example.
    it([
      `should do something.`
    ].join(''), () => {
      const solution = solverPart2(example);
    });
  });
});

// ===============
// == Functions ==
// ===============
